<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Showcase Template Group</title><link>https://computacionvisualgrupo.github.io/showcase/</link><description>Recent content in Introduction on Showcase Template Group</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://computacionvisualgrupo.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://computacionvisualgrupo.github.io/showcase/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://computacionvisualgrupo.github.io/showcase/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
‚ñæ &amp;lt;root&amp;gt;/ ‚ñæ images/ logo.png should become
‚ñæ &amp;lt;root&amp;gt;/ ‚ñæ static/ ‚ñæ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://computacionvisualgrupo.github.io/showcase/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://computacionvisualgrupo.github.io/showcase/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://computacionvisualgrupo.github.io/showcase/docs/about/Fredy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/docs/about/Fredy/</guid><description>Fredy Andres Rosero Cristancho # faroseroc@unal.edu.co - FredyRosero.github.io - @FredyRosero
Hi there üëã
Estudiante de Ingenier√≠a de Sistemas y Computaci√≥n en la UNAL y entusiasta de #cybersec. Miembro de Uqbar UN grupo estudiantil de seguridad inform√°tica de la UNAL.</description></item><item><title/><link>https://computacionvisualgrupo.github.io/showcase/docs/about/Harold/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/docs/about/Harold/</guid><description>
Harold Velazco # havelazcoay@unal.edu.co - HaroldVelazco.github.io - @HaroldVelazco
estudiante de ingenieria de sistemas - unal gamer de corazon entusiasta en la creacion de mapas para juegos</description></item><item><title/><link>https://computacionvisualgrupo.github.io/showcase/docs/about/Sergio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/docs/about/Sergio/</guid><description>Sergio Camilo Espinosa Botero # sespinosab@unal.edu.co https://github.com/sespinosab
Estudiante de Ingenier√≠a de Sistemas de la Universidad Nacional de Colombia.</description></item><item><title/><link>https://computacionvisualgrupo.github.io/showcase/docs/primer-corte/pixelator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/docs/primer-corte/pixelator/</guid><description> P5 Hello world! # Este es otra prueba con c√≥digo de prueba:
P5-iframe holamundo.js #</description></item><item><title/><link>https://computacionvisualgrupo.github.io/showcase/docs/testing/P5-barberpole/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/docs/testing/P5-barberpole/</guid><description>var linew = 20; var lineoffset = 30; var space = linew + lineoffset;
function setup() { var canvas = createCanvas(400, 400); strokeCap(PROJECT); }
function draw() { background(255);
// lines strokeWeight(linew); for (let i = 0; i &amp;lt; 1.5 * width / space; i++) { if (i % 2 == 0) { stroke(255, 0, 0); } else { stroke(0, 0, 255); } let xoff = i * space + frameCount % (2 * space); line(-width / 2 + xoff, height / 4, xoff, 3 * height / 4); } // hiding blocks if (!</description></item><item><title/><link>https://computacionvisualgrupo.github.io/showcase/docs/testing/P5-ejercicio1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/docs/testing/P5-ejercicio1/</guid><description>P5 prueba de pagina! # codigo de prueba
fin</description></item><item><title/><link>https://computacionvisualgrupo.github.io/showcase/docs/testing/P5-hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/docs/testing/P5-hello-world/</guid><description>P5 Hello world! # by FredyRosero
Este es otra prueba con c√≥digo de prueba:
P5-iframe holamundo.js # Es el mnismo colors.js:
Conclusiones # Fin.</description></item><item><title/><link>https://computacionvisualgrupo.github.io/showcase/docs/testing/p5Testing2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://computacionvisualgrupo.github.io/showcase/docs/testing/p5Testing2/</guid><description>P5 Testing! # Este es otra prueba con c√≥digo de prueba:
Fin.</description></item></channel></rss>